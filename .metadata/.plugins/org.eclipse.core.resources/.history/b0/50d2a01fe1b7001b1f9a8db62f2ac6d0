package com.exercise3;

import org.testng.annotations.Test;

import io.cucumber.java.en.And;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;

import org.testng.annotations.BeforeTest;
import org.testng.Assert;
import org.testng.annotations.AfterTest;

public class TestsE3 {
	  static String firstPrice, detailPrice, priceSubTotal, cartCount; 
	  
	  public void setFirstPrice(String price) {
		  TestsE3.firstPrice = price; 
	  }
		
	  public String getFirstPrice() {
		  return TestsE3.firstPrice; 
	  }
		
	  public void setDetailPrice(String price) {
		  TestsE3.detailPrice = price; 
	  }
		
	  public String getDetailPrice() {
		  return TestsE3.detailPrice; 
	  }
		
	  public void setPriceSubTotal(String price) {
		  TestsE3.priceSubTotal = price; 
	  }
		
	  public String getPriceSubTotal() {
		  return TestsE3.priceSubTotal; 
	  }
	  
	  @Test 	
	  @Then("^Login with valid credentials$") 
	  public void User_Login() throws Exception  {
		  AmazonPage.login();
	  }

	  @And("^Search for product Samsung Galaxy S9 64GB$") 
	  public void Search_Samsung_Galaxy_S9_64GB() throws Exception {
		  Browser.searchAndSelectSamsung();
	  }

	  @And("^Select first product and save the price$") 
	  public void Select_First_Product() throws Exception {
		  setFirstPrice(Browser.selectFirstProduct()); 
//		  System.out.println("first price " + getFirstPrice()); 
	  }
	  
	  @And("^Click on the product$") 
	  public void Click_On_The_Product() throws Exception{
		  Browser.clickFirstProduct(); 
	  }
	  
	  @Then("^Validate first price vs detail price$") 
	  public void Validate_First_Price_vs_DetailPrice() throws Exception{
		  setDetailPrice(Browser.obtainDetailPrice()); 
//		  System.out.println("detail price " + getDetailPrice());
		  Assert.assertEquals(getDetailPrice(), getFirstPrice());
		  
	  }
	  
	  @When("Click on Add to Cart")
	  public void click_on_Add_to_Cart() throws Exception{
	      Browser.addToCart(); 
	  }

	  @Then("Validate again, first price vs current price")
	  public void validate_again_first_price_vs_current_price() throws Exception{
		  setPriceSubTotal(Browser.subTotal().trim());
//		  System.out.println("SubTotal " + getPriceSubTotal());		  
		  Assert.assertEquals(getPriceSubTotal(), getFirstPrice());
	  }

	  @Then("Validate that the Shop car has <1> as a number")
	  public void validate_that_the_Shop_car_has_1_as_a_number() throws Exception{
		  Assert.assertEquals(Browser.cartCount(), "1");
		  cartCount = Browser.cartCount();
//		  System.out.println("Cart Count 1 " + cartCount);
	  }

	  @When("Search for another product: Alienware Aw3418DW")
	  public void search_for_another_product_Alienware_Aw3418DW() throws Exception{
		  Browser.searchAlienware(); 
	  }

	  @When("Select First product")
	  public void select_First_product() throws Exception{
		  Browser.clickAlienProduct(); 
	  }

	  @When("Add to Cart")
	  public void add_to_Cart() throws Exception{
	      Browser.addToCart(); 
	  }

	  @Then("Verify that the cart number is now <2>")
	  public void verify_that_the_cart_number_is_now_2() throws Exception{
		  Assert.assertEquals(Browser.cartCount(), "2");
		  cartCount = Browser.cartCount();
//		  System.out.println("Cart Count 2" + cartCount);
	  }
  
  @BeforeTest
    @Given("^Go to Amazon.com.mx$") 
	  public static void beforeTest() throws Exception {
		  AmazonPage.goToAmazon();  
	  }
  

  @AfterTest
  @When("^End of test$")
  	public void afterTest() throws Exception {
	  AmazonPage.close(); 
  	}

}
